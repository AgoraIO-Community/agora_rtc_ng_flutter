/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names

import 'dart:io';

import 'package:agora_rtc_ng/agora_rtc_ng.dart';
import 'package:flutter_test/flutter_test.dart';
import 'dart:typed_data';
import 'package:integration_test_app/main.dart' as app;

void rtcEngineSmokeTestCases() {
  testWidgets(
    'initialize',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const ChannelProfileType contextChannelProfile =
          ChannelProfileType.channelProfileCommunication;
      const AudioScenarioType contextAudioScenario =
          AudioScenarioType.audioScenarioDefault;
      const LogLevel logConfigLevel = LogLevel.logLevelNone;
      const String logConfigFilePath = "hello";
      const int logConfigFileSizeInKB = 10;
      const LogConfig contextLogConfig = LogConfig(
        filePath: logConfigFilePath,
        fileSizeInKB: logConfigFileSizeInKB,
        level: logConfigLevel,
      );
      const ThreadPriorityType contextThreadPriority =
          ThreadPriorityType.lowest;
      const String contextAppId = "hello";
      const bool contextEnableAudioDevice = true;
      const int contextAreaCode = 10;
      const bool contextUseExternalEglContext = true;
      const RtcEngineContext context = RtcEngineContext(
        appId: contextAppId,
        enableAudioDevice: contextEnableAudioDevice,
        channelProfile: contextChannelProfile,
        audioScenario: contextAudioScenario,
        areaCode: contextAreaCode,
        logConfig: contextLogConfig,
        threadPriority: contextThreadPriority,
        useExternalEglContext: contextUseExternalEglContext,
      );
      await rtcEngine.initialize(
        context,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getVersion',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getVersion();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getErrorDescription',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int code = 10;
      await rtcEngine.getErrorDescription(
        code,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateChannelMediaOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const ClientRoleType optionsClientRoleType =
          ClientRoleType.clientRoleBroadcaster;
      const AudienceLatencyLevelType optionsAudienceLatencyLevel =
          AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
      const VideoStreamType optionsDefaultVideoStreamType =
          VideoStreamType.videoStreamHigh;
      const ChannelProfileType optionsChannelProfile =
          ChannelProfileType.channelProfileCommunication;
      const NlpAggressiveness
          audioOptionsExternalAecAggressivenessExternalCustom =
          NlpAggressiveness.nlpNotSpecified;
      const bool audioOptionsExternalEnableAecExternalCustom = true;
      const bool audioOptionsExternalEnableAgcExternalCustom = true;
      const bool audioOptionsExternalEnableAnsExternalCustom = true;
      const bool audioOptionsExternalEnableAecExternalLoopback = true;
      const AudioOptionsExternal optionsAudioOptionsExternal =
          AudioOptionsExternal(
        enableAecExternalCustom: audioOptionsExternalEnableAecExternalCustom,
        enableAgcExternalCustom: audioOptionsExternalEnableAgcExternalCustom,
        enableAnsExternalCustom: audioOptionsExternalEnableAnsExternalCustom,
        aecAggressivenessExternalCustom:
            audioOptionsExternalAecAggressivenessExternalCustom,
        enableAecExternalLoopback:
            audioOptionsExternalEnableAecExternalLoopback,
      );
      const bool optionsPublishCameraTrack = true;
      const bool optionsPublishSecondaryCameraTrack = true;
      const bool optionsPublishAudioTrack = true;
      const bool optionsPublishScreenTrack = true;
      const bool optionsPublishSecondaryScreenTrack = true;
      const bool optionsPublishCustomAudioTrack = true;
      const int optionsPublishCustomAudioSourceId = 10;
      const bool optionsPublishCustomAudioTrackEnableAec = true;
      const bool optionsPublishDirectCustomAudioTrack = true;
      const bool optionsPublishCustomAudioTrackAec = true;
      const bool optionsPublishCustomVideoTrack = true;
      const bool optionsPublishEncodedVideoTrack = true;
      const bool optionsPublishMediaPlayerAudioTrack = true;
      const bool optionsPublishMediaPlayerVideoTrack = true;
      const bool optionsPublishTrancodedVideoTrack = true;
      const bool optionsAutoSubscribeAudio = true;
      const bool optionsAutoSubscribeVideo = true;
      const bool optionsStartPreview = true;
      const bool optionsEnableAudioRecordingOrPlayout = true;
      const int optionsPublishMediaPlayerId = 10;
      const int optionsAudioDelayMs = 10;
      const int optionsMediaPlayerAudioDelayMs = 10;
      const String optionsToken = "hello";
      const bool optionsEnableBuiltInMediaEncryption = true;
      const bool optionsPublishRhythmPlayerTrack = true;
      const ChannelMediaOptions options = ChannelMediaOptions(
        publishCameraTrack: optionsPublishCameraTrack,
        publishSecondaryCameraTrack: optionsPublishSecondaryCameraTrack,
        publishAudioTrack: optionsPublishAudioTrack,
        publishScreenTrack: optionsPublishScreenTrack,
        publishSecondaryScreenTrack: optionsPublishSecondaryScreenTrack,
        publishCustomAudioTrack: optionsPublishCustomAudioTrack,
        publishCustomAudioSourceId: optionsPublishCustomAudioSourceId,
        publishCustomAudioTrackEnableAec:
            optionsPublishCustomAudioTrackEnableAec,
        publishDirectCustomAudioTrack: optionsPublishDirectCustomAudioTrack,
        publishCustomAudioTrackAec: optionsPublishCustomAudioTrackAec,
        publishCustomVideoTrack: optionsPublishCustomVideoTrack,
        publishEncodedVideoTrack: optionsPublishEncodedVideoTrack,
        publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
        publishMediaPlayerVideoTrack: optionsPublishMediaPlayerVideoTrack,
        publishTrancodedVideoTrack: optionsPublishTrancodedVideoTrack,
        autoSubscribeAudio: optionsAutoSubscribeAudio,
        autoSubscribeVideo: optionsAutoSubscribeVideo,
        startPreview: optionsStartPreview,
        enableAudioRecordingOrPlayout: optionsEnableAudioRecordingOrPlayout,
        publishMediaPlayerId: optionsPublishMediaPlayerId,
        clientRoleType: optionsClientRoleType,
        audienceLatencyLevel: optionsAudienceLatencyLevel,
        defaultVideoStreamType: optionsDefaultVideoStreamType,
        channelProfile: optionsChannelProfile,
        audioDelayMs: optionsAudioDelayMs,
        mediaPlayerAudioDelayMs: optionsMediaPlayerAudioDelayMs,
        token: optionsToken,
        enableBuiltInMediaEncryption: optionsEnableBuiltInMediaEncryption,
        publishRhythmPlayerTrack: optionsPublishRhythmPlayerTrack,
        audioOptionsExternal: optionsAudioOptionsExternal,
      );
      await rtcEngine.updateChannelMediaOptions(
        options,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'renewToken',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String token = "hello";
      await rtcEngine.renewToken(
        token,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setChannelProfile',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const ChannelProfileType profile =
          ChannelProfileType.channelProfileCommunication;
      await rtcEngine.setChannelProfile(
        profile,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopEchoTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopEchoTest();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableVideo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.enableVideo();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'disableVideo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.disableVideo();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startLastmileProbeTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool configProbeUplink = true;
      const bool configProbeDownlink = true;
      const int configExpectedUplinkBitrate = 10;
      const int configExpectedDownlinkBitrate = 10;
      const LastmileProbeConfig config = LastmileProbeConfig(
        probeUplink: configProbeUplink,
        probeDownlink: configProbeDownlink,
        expectedUplinkBitrate: configExpectedUplinkBitrate,
        expectedDownlinkBitrate: configExpectedDownlinkBitrate,
      );
      await rtcEngine.startLastmileProbeTest(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopLastmileProbeTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopLastmileProbeTest();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVideoEncoderConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoCodecType configCodecType = VideoCodecType.videoCodecNone;
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions configDimensions = VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const OrientationMode configOrientationMode =
          OrientationMode.orientationModeAdaptive;
      const DegradationPreference configDegradationPreference =
          DegradationPreference.maintainQuality;
      const VideoMirrorModeType configMirrorMode =
          VideoMirrorModeType.videoMirrorModeAuto;
      const int configFrameRate = 10;
      const int configBitrate = 10;
      const int configMinBitrate = 10;
      const VideoEncoderConfiguration config = VideoEncoderConfiguration(
        codecType: configCodecType,
        dimensions: configDimensions,
        frameRate: configFrameRate,
        bitrate: configBitrate,
        minBitrate: configMinBitrate,
        orientationMode: configOrientationMode,
        degradationPreference: configDegradationPreference,
        mirrorMode: configMirrorMode,
      );
      await rtcEngine.setVideoEncoderConfiguration(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setBeautyEffectOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      const LighteningContrastLevel optionsLighteningContrastLevel =
          LighteningContrastLevel.lighteningContrastLow;
      const double optionsLighteningLevel = 10.0;
      const double optionsSmoothnessLevel = 10.0;
      const double optionsRednessLevel = 10.0;
      const double optionsSharpnessLevel = 10.0;
      const BeautyOptions options = BeautyOptions(
        lighteningContrastLevel: optionsLighteningContrastLevel,
        lighteningLevel: optionsLighteningLevel,
        smoothnessLevel: optionsSmoothnessLevel,
        rednessLevel: optionsRednessLevel,
        sharpnessLevel: optionsSharpnessLevel,
      );
      const MediaSourceType type = MediaSourceType.audioPlayoutSource;
      await rtcEngine.setBeautyEffectOptions(
        enabled: enabled,
        options: options,
        type: type,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableVirtualBackground',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      const BackgroundSourceType backgroundSourceBackgroundSourceType =
          BackgroundSourceType.backgroundColor;
      const BackgroundBlurDegree backgroundSourceBlurDegree =
          BackgroundBlurDegree.blurDegreeLow;
      const int backgroundSourceColor = 10;
      const String backgroundSourceSource = "hello";
      const VirtualBackgroundSource backgroundSource = VirtualBackgroundSource(
        backgroundSourceType: backgroundSourceBackgroundSourceType,
        color: backgroundSourceColor,
        source: backgroundSourceSource,
        blurDegree: backgroundSourceBlurDegree,
      );
      await rtcEngine.enableVirtualBackground(
        enabled: enabled,
        backgroundSource: backgroundSource,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableRemoteSuperResolution',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int userId = 10;
      const bool enable = true;
      await rtcEngine.enableRemoteSuperResolution(
        userId: userId,
        enable: enable,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.enableAudio();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'disableAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.disableAudio();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableLocalAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      await rtcEngine.enableLocalAudio(
        enabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteLocalAudioStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool mute = true;
      await rtcEngine.muteLocalAudioStream(
        mute,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteAllRemoteAudioStreams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool mute = true;
      await rtcEngine.muteAllRemoteAudioStreams(
        mute,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDefaultMuteAllRemoteAudioStreams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool mute = true;
      await rtcEngine.setDefaultMuteAllRemoteAudioStreams(
        mute,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteRemoteAudioStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int uid = 10;
      const bool mute = true;
      await rtcEngine.muteRemoteAudioStream(
        uid: uid,
        mute: mute,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteLocalVideoStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool mute = true;
      await rtcEngine.muteLocalVideoStream(
        mute,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableLocalVideo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      await rtcEngine.enableLocalVideo(
        enabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteAllRemoteVideoStreams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool mute = true;
      await rtcEngine.muteAllRemoteVideoStreams(
        mute,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDefaultMuteAllRemoteVideoStreams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool mute = true;
      await rtcEngine.setDefaultMuteAllRemoteVideoStreams(
        mute,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteRemoteVideoStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int uid = 10;
      const bool mute = true;
      await rtcEngine.muteRemoteVideoStream(
        uid: uid,
        mute: mute,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteVideoStreamType',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int uid = 10;
      const VideoStreamType streamType = VideoStreamType.videoStreamHigh;
      await rtcEngine.setRemoteVideoStreamType(
        uid: uid,
        streamType: streamType,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteDefaultVideoStreamType',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoStreamType streamType = VideoStreamType.videoStreamHigh;
      await rtcEngine.setRemoteDefaultVideoStreamType(
        streamType,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableAudioVolumeIndication',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int interval = 10;
      const int smooth = 10;
      const bool reportVad = true;
      await rtcEngine.enableAudioVolumeIndication(
        interval: interval,
        smooth: smooth,
        reportVad: reportVad,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopAudioRecording',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopAudioRecording();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopAudioMixing',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopAudioMixing();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseAudioMixing',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.pauseAudioMixing();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeAudioMixing',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.resumeAudioMixing();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustAudioMixingVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int volume = 10;
      await rtcEngine.adjustAudioMixingVolume(
        volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustAudioMixingPublishVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int volume = 10;
      await rtcEngine.adjustAudioMixingPublishVolume(
        volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioMixingPublishVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getAudioMixingPublishVolume();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustAudioMixingPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int volume = 10;
      await rtcEngine.adjustAudioMixingPlayoutVolume(
        volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioMixingPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getAudioMixingPlayoutVolume();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioMixingDuration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getAudioMixingDuration();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioMixingCurrentPosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getAudioMixingCurrentPosition();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioMixingPosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int pos = 10;
      await rtcEngine.setAudioMixingPosition(
        pos,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioMixingPitch',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int pitch = 10;
      await rtcEngine.setAudioMixingPitch(
        pitch,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getEffectsVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getEffectsVolume();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setEffectsVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int volume = 10;
      await rtcEngine.setEffectsVolume(
        volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'preloadEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int soundId = 10;
      const String filePath = "hello";
      const int startPos = 10;
      await rtcEngine.preloadEffect(
        soundId: soundId,
        filePath: filePath,
        startPos: startPos,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'playEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int soundId = 10;
      const String filePath = "hello";
      const int loopCount = 10;
      const double pitch = 10.0;
      const double pan = 10.0;
      const int gain = 10;
      const bool publish = true;
      const int startPos = 10;
      await rtcEngine.playEffect(
        soundId: soundId,
        filePath: filePath,
        loopCount: loopCount,
        pitch: pitch,
        pan: pan,
        gain: gain,
        publish: publish,
        startPos: startPos,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'playAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int loopCount = 10;
      const double pitch = 10.0;
      const double pan = 10.0;
      const int gain = 10;
      const bool publish = true;
      await rtcEngine.playAllEffects(
        loopCount: loopCount,
        pitch: pitch,
        pan: pan,
        gain: gain,
        publish: publish,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getVolumeOfEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int soundId = 10;
      await rtcEngine.getVolumeOfEffect(
        soundId,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVolumeOfEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int soundId = 10;
      const int volume = 10;
      await rtcEngine.setVolumeOfEffect(
        soundId: soundId,
        volume: volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int soundId = 10;
      await rtcEngine.pauseEffect(
        soundId,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.pauseAllEffects();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int soundId = 10;
      await rtcEngine.resumeEffect(
        soundId,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.resumeAllEffects();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int soundId = 10;
      await rtcEngine.stopEffect(
        soundId,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopAllEffects();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unloadEffect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int soundId = 10;
      await rtcEngine.unloadEffect(
        soundId,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unloadAllEffects',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.unloadAllEffects();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableSoundPositionIndication',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      await rtcEngine.enableSoundPositionIndication(
        enabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteVoicePosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int uid = 10;
      const double pan = 10.0;
      const double gain = 10.0;
      await rtcEngine.setRemoteVoicePosition(
        uid: uid,
        pan: pan,
        gain: gain,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableSpatialAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      await rtcEngine.enableSpatialAudio(
        enabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteUserSpatialAudioParams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int uid = 10;
      const double paramsSpeakerAzimuth = 10.0;
      const double paramsSpeakerElevation = 10.0;
      const double paramsSpeakerDistance = 10.0;
      const int paramsSpeakerOrientation = 10;
      const bool paramsEnableBlur = true;
      const bool paramsEnableAirAbsorb = true;
      const SpatialAudioParams params = SpatialAudioParams(
        speakerAzimuth: paramsSpeakerAzimuth,
        speakerElevation: paramsSpeakerElevation,
        speakerDistance: paramsSpeakerDistance,
        speakerOrientation: paramsSpeakerOrientation,
        enableBlur: paramsEnableBlur,
        enableAirAbsorb: paramsEnableAirAbsorb,
      );
      await rtcEngine.setRemoteUserSpatialAudioParams(
        uid: uid,
        params: params,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVoiceBeautifierPreset',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VoiceBeautifierPreset preset =
          VoiceBeautifierPreset.voiceBeautifierOff;
      await rtcEngine.setVoiceBeautifierPreset(
        preset,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioEffectPreset',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const AudioEffectPreset preset = AudioEffectPreset.audioEffectOff;
      await rtcEngine.setAudioEffectPreset(
        preset,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVoiceConversionPreset',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VoiceConversionPreset preset =
          VoiceConversionPreset.voiceConversionOff;
      await rtcEngine.setVoiceConversionPreset(
        preset,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioEffectParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const AudioEffectPreset preset = AudioEffectPreset.audioEffectOff;
      const int param1 = 10;
      const int param2 = 10;
      await rtcEngine.setAudioEffectParameters(
        preset: preset,
        param1: param1,
        param2: param2,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVoiceBeautifierParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VoiceBeautifierPreset preset =
          VoiceBeautifierPreset.voiceBeautifierOff;
      const int param1 = 10;
      const int param2 = 10;
      await rtcEngine.setVoiceBeautifierParameters(
        preset: preset,
        param1: param1,
        param2: param2,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setVoiceConversionParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VoiceConversionPreset preset =
          VoiceConversionPreset.voiceConversionOff;
      const int param1 = 10;
      const int param2 = 10;
      await rtcEngine.setVoiceConversionParameters(
        preset: preset,
        param1: param1,
        param2: param2,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalVoicePitch',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const double pitch = 10.0;
      await rtcEngine.setLocalVoicePitch(
        pitch,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalVoiceEqualization',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const AudioEqualizationBandFrequency bandFrequency =
          AudioEqualizationBandFrequency.audioEqualizationBand31;
      const int bandGain = 10;
      await rtcEngine.setLocalVoiceEqualization(
        bandFrequency: bandFrequency,
        bandGain: bandGain,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalVoiceReverb',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const AudioReverbType reverbKey = AudioReverbType.audioReverbDryLevel;
      const int value = 10;
      await rtcEngine.setLocalVoiceReverb(
        reverbKey: reverbKey,
        value: value,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLogFile',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String filePath = "hello";
      await rtcEngine.setLogFile(
        filePath,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLogFilter',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const LogFilterType filter = LogFilterType.logFilterOff;
      await rtcEngine.setLogFilter(
        filter,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLogLevel',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const LogLevel level = LogLevel.logLevelNone;
      await rtcEngine.setLogLevel(
        level,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLogFileSize',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int fileSizeInKBytes = 10;
      await rtcEngine.setLogFileSize(
        fileSizeInKBytes,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'uploadLogFile',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String requestId = "hello";
      await rtcEngine.uploadLogFile(
        requestId,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteRenderMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int uid = 10;
      const RenderModeType renderMode = RenderModeType.renderModeHidden;
      const VideoMirrorModeType mirrorMode =
          VideoMirrorModeType.videoMirrorModeAuto;
      await rtcEngine.setRemoteRenderMode(
        uid: uid,
        renderMode: renderMode,
        mirrorMode: mirrorMode,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalVideoMirrorMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoMirrorModeType mirrorMode =
          VideoMirrorModeType.videoMirrorModeAuto;
      await rtcEngine.setLocalVideoMirrorMode(
        mirrorMode,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableEchoCancellationExternal',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      const int audioSourceDelay = 10;
      await rtcEngine.enableEchoCancellationExternal(
        enabled: enabled,
        audioSourceDelay: audioSourceDelay,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableCustomAudioLocalPlayback',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int sourceId = 10;
      const bool enabled = true;
      await rtcEngine.enableCustomAudioLocalPlayback(
        sourceId: sourceId,
        enabled: enabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startPrimaryCustomAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool configEnableLocalPlayback = true;
      const AudioTrackConfig config = AudioTrackConfig(
        enableLocalPlayback: configEnableLocalPlayback,
      );
      await rtcEngine.startPrimaryCustomAudioTrack(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopPrimaryCustomAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopPrimaryCustomAudioTrack();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startSecondaryCustomAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool configEnableLocalPlayback = true;
      const AudioTrackConfig config = AudioTrackConfig(
        enableLocalPlayback: configEnableLocalPlayback,
      );
      await rtcEngine.startSecondaryCustomAudioTrack(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopSecondaryCustomAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopSecondaryCustomAudioTrack();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRecordingAudioFrameParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int sampleRate = 10;
      const int channel = 10;
      const RawAudioFrameOpModeType mode =
          RawAudioFrameOpModeType.rawAudioFrameOpModeReadOnly;
      const int samplesPerCall = 10;
      await rtcEngine.setRecordingAudioFrameParameters(
        sampleRate: sampleRate,
        channel: channel,
        mode: mode,
        samplesPerCall: samplesPerCall,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlaybackAudioFrameParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int sampleRate = 10;
      const int channel = 10;
      const RawAudioFrameOpModeType mode =
          RawAudioFrameOpModeType.rawAudioFrameOpModeReadOnly;
      const int samplesPerCall = 10;
      await rtcEngine.setPlaybackAudioFrameParameters(
        sampleRate: sampleRate,
        channel: channel,
        mode: mode,
        samplesPerCall: samplesPerCall,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setMixedAudioFrameParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int sampleRate = 10;
      const int channel = 10;
      const int samplesPerCall = 10;
      await rtcEngine.setMixedAudioFrameParameters(
        sampleRate: sampleRate,
        channel: channel,
        samplesPerCall: samplesPerCall,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlaybackAudioFrameBeforeMixingParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int sampleRate = 10;
      const int channel = 10;
      await rtcEngine.setPlaybackAudioFrameBeforeMixingParameters(
        sampleRate: sampleRate,
        channel: channel,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableAudioSpectrumMonitor',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int intervalInMS = 10;
      await rtcEngine.enableAudioSpectrumMonitor(
        intervalInMS: intervalInMS,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'disableAudioSpectrumMonitor',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.disableAudioSpectrumMonitor();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustRecordingSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int volume = 10;
      await rtcEngine.adjustRecordingSignalVolume(
        volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteRecordingSignal',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool mute = true;
      await rtcEngine.muteRecordingSignal(
        mute,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustPlaybackSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int volume = 10;
      await rtcEngine.adjustPlaybackSignalVolume(
        volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustUserPlaybackSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int uid = 10;
      const int volume = 10;
      await rtcEngine.adjustUserPlaybackSignalVolume(
        uid: uid,
        volume: volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalPublishFallbackOption',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const StreamFallbackOptions option =
          StreamFallbackOptions.streamFallbackOptionDisabled;
      await rtcEngine.setLocalPublishFallbackOption(
        option,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteSubscribeFallbackOption',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const StreamFallbackOptions option =
          StreamFallbackOptions.streamFallbackOptionDisabled;
      await rtcEngine.setRemoteSubscribeFallbackOption(
        option,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableLoopbackRecording',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      const String deviceName = "hello";
      await rtcEngine.enableLoopbackRecording(
        enabled: enabled,
        deviceName: deviceName,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustLoopbackRecordingVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int volume = 10;
      await rtcEngine.adjustLoopbackRecordingVolume(
        volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getLoopbackRecordingVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getLoopbackRecordingVolume();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableInEarMonitoring',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      const EarMonitoringFilterType includeAudioFilters =
          EarMonitoringFilterType.earMonitoringFilterNone;
      await rtcEngine.enableInEarMonitoring(
        enabled: enabled,
        includeAudioFilters: includeAudioFilters,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setInEarMonitoringVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int volume = 10;
      await rtcEngine.setInEarMonitoringVolume(
        volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'loadExtensionProvider',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String path = "hello";
      await rtcEngine.loadExtensionProvider(
        path,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setExtensionProviderProperty',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String provider = "hello";
      const String key = "hello";
      const String value = "hello";
      await rtcEngine.setExtensionProviderProperty(
        provider: provider,
        key: key,
        value: value,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableExtension',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String provider = "hello";
      const String extension = "hello";
      const bool enable = true;
      const MediaSourceType type = MediaSourceType.audioPlayoutSource;
      await rtcEngine.enableExtension(
        provider: provider,
        extension: extension,
        enable: enable,
        type: type,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setExtensionProperty',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String provider = "hello";
      const String extension = "hello";
      const String key = "hello";
      const String value = "hello";
      const MediaSourceType type = MediaSourceType.audioPlayoutSource;
      await rtcEngine.setExtensionProperty(
        provider: provider,
        extension: extension,
        key: key,
        value: value,
        type: type,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getExtensionProperty',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String provider = "hello";
      const String extension = "hello";
      const String key = "hello";
      const int bufLen = 10;
      const MediaSourceType type = MediaSourceType.audioPlayoutSource;
      await rtcEngine.getExtensionProperty(
        provider: provider,
        extension: extension,
        key: key,
        bufLen: bufLen,
        type: type,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraCapturerConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const CameraDirection configCameraDirection = CameraDirection.cameraRear;
      const int formatWidth = 10;
      const int formatHeight = 10;
      const int formatFps = 10;
      const VideoFormat configFormat = VideoFormat(
        width: formatWidth,
        height: formatHeight,
        fps: formatFps,
      );
      const String configDeviceId = "hello";
      const CameraCapturerConfiguration config = CameraCapturerConfiguration(
        cameraDirection: configCameraDirection,
        deviceId: configDeviceId,
        format: configFormat,
      );
      await rtcEngine.setCameraCapturerConfiguration(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'switchCamera',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.switchCamera();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraZoomSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.isCameraZoomSupported();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraFaceDetectSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.isCameraFaceDetectSupported();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraTorchSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.isCameraTorchSupported();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraFocusSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.isCameraFocusSupported();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraAutoFocusFaceModeSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.isCameraAutoFocusFaceModeSupported();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraZoomFactor',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const double factor = 10.0;
      await rtcEngine.setCameraZoomFactor(
        factor,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableFaceDetection',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      await rtcEngine.enableFaceDetection(
        enabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getCameraMaxZoomFactor',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getCameraMaxZoomFactor();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraFocusPositionInPreview',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const double positionX = 10.0;
      const double positionY = 10.0;
      await rtcEngine.setCameraFocusPositionInPreview(
        positionX: positionX,
        positionY: positionY,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraTorchOn',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool isOn = true;
      await rtcEngine.setCameraTorchOn(
        isOn,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraAutoFocusFaceModeEnabled',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      await rtcEngine.setCameraAutoFocusFaceModeEnabled(
        enabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraExposurePositionSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.isCameraExposurePositionSupported();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraExposurePosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const double positionXinView = 10.0;
      const double positionYinView = 10.0;
      await rtcEngine.setCameraExposurePosition(
        positionXinView: positionXinView,
        positionYinView: positionYinView,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isCameraAutoExposureFaceModeSupported',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.isCameraAutoExposureFaceModeSupported();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraAutoExposureFaceModeEnabled',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      await rtcEngine.setCameraAutoExposureFaceModeEnabled(
        enabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDefaultAudioRouteToSpeakerphone',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool defaultToSpeaker = true;
      await rtcEngine.setDefaultAudioRouteToSpeakerphone(
        defaultToSpeaker,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setEnableSpeakerphone',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool speakerOn = true;
      await rtcEngine.setEnableSpeakerphone(
        speakerOn,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isSpeakerphoneEnabled',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.isSpeakerphoneEnabled();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getScreenCaptureSources',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int thumbSizeWidth = 10;
      const int thumbSizeHeight = 10;
      const Size thumbSize = Size(
        width: thumbSizeWidth,
        height: thumbSizeHeight,
      );
      const int iconSizeWidth = 10;
      const int iconSizeHeight = 10;
      const Size iconSize = Size(
        width: iconSizeWidth,
        height: iconSizeHeight,
      );
      const bool includeScreen = true;
      await rtcEngine.getScreenCaptureSources(
        thumbSize: thumbSize,
        iconSize: iconSize,
        includeScreen: includeScreen,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioSessionOperationRestriction',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const AudioSessionOperationRestriction restriction =
          AudioSessionOperationRestriction.audioSessionOperationRestrictionNone;
      await rtcEngine.setAudioSessionOperationRestriction(
        restriction,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startScreenCaptureByDisplayId',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int displayId = 10;
      const int regionRectX = 10;
      const int regionRectY = 10;
      const int regionRectWidth = 10;
      const int regionRectHeight = 10;
      const Rectangle regionRect = Rectangle(
        x: regionRectX,
        y: regionRectY,
        width: regionRectWidth,
        height: regionRectHeight,
      );
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions captureParamsDimensions = VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const int captureParamsFrameRate = 10;
      const int captureParamsBitrate = 10;
      const bool captureParamsCaptureMouseCursor = true;
      const bool captureParamsWindowFocus = true;
      const List<int> captureParamsExcludeWindowList = [];
      const int captureParamsExcludeWindowCount = 10;
      const ScreenCaptureParameters captureParams = ScreenCaptureParameters(
        dimensions: captureParamsDimensions,
        frameRate: captureParamsFrameRate,
        bitrate: captureParamsBitrate,
        captureMouseCursor: captureParamsCaptureMouseCursor,
        windowFocus: captureParamsWindowFocus,
        excludeWindowList: captureParamsExcludeWindowList,
        excludeWindowCount: captureParamsExcludeWindowCount,
      );
      await rtcEngine.startScreenCaptureByDisplayId(
        displayId: displayId,
        regionRect: regionRect,
        captureParams: captureParams,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startScreenCaptureByScreenRect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int screenRectX = 10;
      const int screenRectY = 10;
      const int screenRectWidth = 10;
      const int screenRectHeight = 10;
      const Rectangle screenRect = Rectangle(
        x: screenRectX,
        y: screenRectY,
        width: screenRectWidth,
        height: screenRectHeight,
      );
      const int regionRectX = 10;
      const int regionRectY = 10;
      const int regionRectWidth = 10;
      const int regionRectHeight = 10;
      const Rectangle regionRect = Rectangle(
        x: regionRectX,
        y: regionRectY,
        width: regionRectWidth,
        height: regionRectHeight,
      );
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions captureParamsDimensions = VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const int captureParamsFrameRate = 10;
      const int captureParamsBitrate = 10;
      const bool captureParamsCaptureMouseCursor = true;
      const bool captureParamsWindowFocus = true;
      const List<int> captureParamsExcludeWindowList = [];
      const int captureParamsExcludeWindowCount = 10;
      const ScreenCaptureParameters captureParams = ScreenCaptureParameters(
        dimensions: captureParamsDimensions,
        frameRate: captureParamsFrameRate,
        bitrate: captureParamsBitrate,
        captureMouseCursor: captureParamsCaptureMouseCursor,
        windowFocus: captureParamsWindowFocus,
        excludeWindowList: captureParamsExcludeWindowList,
        excludeWindowCount: captureParamsExcludeWindowCount,
      );
      await rtcEngine.startScreenCaptureByScreenRect(
        screenRect: screenRect,
        regionRect: regionRect,
        captureParams: captureParams,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioDeviceInfo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getAudioDeviceInfo();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startScreenCaptureByWindowId',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int windowId = 10;
      const int regionRectX = 10;
      const int regionRectY = 10;
      const int regionRectWidth = 10;
      const int regionRectHeight = 10;
      const Rectangle regionRect = Rectangle(
        x: regionRectX,
        y: regionRectY,
        width: regionRectWidth,
        height: regionRectHeight,
      );
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions captureParamsDimensions = VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const int captureParamsFrameRate = 10;
      const int captureParamsBitrate = 10;
      const bool captureParamsCaptureMouseCursor = true;
      const bool captureParamsWindowFocus = true;
      const List<int> captureParamsExcludeWindowList = [];
      const int captureParamsExcludeWindowCount = 10;
      const ScreenCaptureParameters captureParams = ScreenCaptureParameters(
        dimensions: captureParamsDimensions,
        frameRate: captureParamsFrameRate,
        bitrate: captureParamsBitrate,
        captureMouseCursor: captureParamsCaptureMouseCursor,
        windowFocus: captureParamsWindowFocus,
        excludeWindowList: captureParamsExcludeWindowList,
        excludeWindowCount: captureParamsExcludeWindowCount,
      );
      await rtcEngine.startScreenCaptureByWindowId(
        windowId: windowId,
        regionRect: regionRect,
        captureParams: captureParams,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setScreenCaptureContentHint',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoContentHint contentHint = VideoContentHint.contentHintNone;
      await rtcEngine.setScreenCaptureContentHint(
        contentHint,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateScreenCaptureRegion',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int regionRectX = 10;
      const int regionRectY = 10;
      const int regionRectWidth = 10;
      const int regionRectHeight = 10;
      const Rectangle regionRect = Rectangle(
        x: regionRectX,
        y: regionRectY,
        width: regionRectWidth,
        height: regionRectHeight,
      );
      await rtcEngine.updateScreenCaptureRegion(
        regionRect,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateScreenCaptureParameters',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions captureParamsDimensions = VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const int captureParamsFrameRate = 10;
      const int captureParamsBitrate = 10;
      const bool captureParamsCaptureMouseCursor = true;
      const bool captureParamsWindowFocus = true;
      const List<int> captureParamsExcludeWindowList = [];
      const int captureParamsExcludeWindowCount = 10;
      const ScreenCaptureParameters captureParams = ScreenCaptureParameters(
        dimensions: captureParamsDimensions,
        frameRate: captureParamsFrameRate,
        bitrate: captureParamsBitrate,
        captureMouseCursor: captureParamsCaptureMouseCursor,
        windowFocus: captureParamsWindowFocus,
        excludeWindowList: captureParamsExcludeWindowList,
        excludeWindowCount: captureParamsExcludeWindowCount,
      );
      await rtcEngine.updateScreenCaptureParameters(
        captureParams,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopScreenCapture();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getCallId',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getCallId();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'rate',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String callId = "hello";
      const int rating = 10;
      const String description = "hello";
      await rtcEngine.rate(
        callId: callId,
        rating: rating,
        description: description,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'complain',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String callId = "hello";
      const String description = "hello";
      await rtcEngine.complain(
        callId: callId,
        description: description,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'addPublishStreamUrl',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String url = "hello";
      const bool transcodingEnabled = true;
      await rtcEngine.addPublishStreamUrl(
        url: url,
        transcodingEnabled: transcodingEnabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'removePublishStreamUrl',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String url = "hello";
      await rtcEngine.removePublishStreamUrl(
        url,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLiveTranscoding',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoCodecProfileType transcodingVideoCodecProfile =
          VideoCodecProfileType.videoCodecProfileBaseline;
      const VideoCodecTypeForStream transcodingVideoCodecType =
          VideoCodecTypeForStream.videoCodecH264ForStream;
      const AudioSampleRateType transcodingAudioSampleRate =
          AudioSampleRateType.audioSampleRate32000;
      const AudioCodecProfileType transcodingAudioCodecProfile =
          AudioCodecProfileType.audioCodecProfileLcAac;
      const int transcodingWidth = 10;
      const int transcodingHeight = 10;
      const int transcodingVideoBitrate = 10;
      const int transcodingVideoFramerate = 10;
      const bool transcodingLowLatency = true;
      const int transcodingVideoGop = 10;
      const int transcodingBackgroundColor = 10;
      const int transcodingUserCount = 10;
      const List<TranscodingUser> transcodingTranscodingUsers = [];
      const String transcodingTranscodingExtraInfo = "hello";
      const String transcodingMetadata = "hello";
      const List<RtcImage> transcodingWatermark = [];
      const int transcodingWatermarkCount = 10;
      const List<RtcImage> transcodingBackgroundImage = [];
      const int transcodingBackgroundImageCount = 10;
      const int transcodingAudioBitrate = 10;
      const int transcodingAudioChannels = 10;
      const List<LiveStreamAdvancedFeature> transcodingAdvancedFeatures = [];
      const int transcodingAdvancedFeatureCount = 10;
      const LiveTranscoding transcoding = LiveTranscoding(
        width: transcodingWidth,
        height: transcodingHeight,
        videoBitrate: transcodingVideoBitrate,
        videoFramerate: transcodingVideoFramerate,
        lowLatency: transcodingLowLatency,
        videoGop: transcodingVideoGop,
        videoCodecProfile: transcodingVideoCodecProfile,
        backgroundColor: transcodingBackgroundColor,
        videoCodecType: transcodingVideoCodecType,
        userCount: transcodingUserCount,
        transcodingUsers: transcodingTranscodingUsers,
        transcodingExtraInfo: transcodingTranscodingExtraInfo,
        metadata: transcodingMetadata,
        watermark: transcodingWatermark,
        watermarkCount: transcodingWatermarkCount,
        backgroundImage: transcodingBackgroundImage,
        backgroundImageCount: transcodingBackgroundImageCount,
        audioSampleRate: transcodingAudioSampleRate,
        audioBitrate: transcodingAudioBitrate,
        audioChannels: transcodingAudioChannels,
        audioCodecProfile: transcodingAudioCodecProfile,
        advancedFeatures: transcodingAdvancedFeatures,
        advancedFeatureCount: transcodingAdvancedFeatureCount,
      );
      await rtcEngine.setLiveTranscoding(
        transcoding,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startRtmpStreamWithoutTranscoding',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String url = "hello";
      await rtcEngine.startRtmpStreamWithoutTranscoding(
        url,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startRtmpStreamWithTranscoding',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String url = "hello";
      const VideoCodecProfileType transcodingVideoCodecProfile =
          VideoCodecProfileType.videoCodecProfileBaseline;
      const VideoCodecTypeForStream transcodingVideoCodecType =
          VideoCodecTypeForStream.videoCodecH264ForStream;
      const AudioSampleRateType transcodingAudioSampleRate =
          AudioSampleRateType.audioSampleRate32000;
      const AudioCodecProfileType transcodingAudioCodecProfile =
          AudioCodecProfileType.audioCodecProfileLcAac;
      const int transcodingWidth = 10;
      const int transcodingHeight = 10;
      const int transcodingVideoBitrate = 10;
      const int transcodingVideoFramerate = 10;
      const bool transcodingLowLatency = true;
      const int transcodingVideoGop = 10;
      const int transcodingBackgroundColor = 10;
      const int transcodingUserCount = 10;
      const List<TranscodingUser> transcodingTranscodingUsers = [];
      const String transcodingTranscodingExtraInfo = "hello";
      const String transcodingMetadata = "hello";
      const List<RtcImage> transcodingWatermark = [];
      const int transcodingWatermarkCount = 10;
      const List<RtcImage> transcodingBackgroundImage = [];
      const int transcodingBackgroundImageCount = 10;
      const int transcodingAudioBitrate = 10;
      const int transcodingAudioChannels = 10;
      const List<LiveStreamAdvancedFeature> transcodingAdvancedFeatures = [];
      const int transcodingAdvancedFeatureCount = 10;
      const LiveTranscoding transcoding = LiveTranscoding(
        width: transcodingWidth,
        height: transcodingHeight,
        videoBitrate: transcodingVideoBitrate,
        videoFramerate: transcodingVideoFramerate,
        lowLatency: transcodingLowLatency,
        videoGop: transcodingVideoGop,
        videoCodecProfile: transcodingVideoCodecProfile,
        backgroundColor: transcodingBackgroundColor,
        videoCodecType: transcodingVideoCodecType,
        userCount: transcodingUserCount,
        transcodingUsers: transcodingTranscodingUsers,
        transcodingExtraInfo: transcodingTranscodingExtraInfo,
        metadata: transcodingMetadata,
        watermark: transcodingWatermark,
        watermarkCount: transcodingWatermarkCount,
        backgroundImage: transcodingBackgroundImage,
        backgroundImageCount: transcodingBackgroundImageCount,
        audioSampleRate: transcodingAudioSampleRate,
        audioBitrate: transcodingAudioBitrate,
        audioChannels: transcodingAudioChannels,
        audioCodecProfile: transcodingAudioCodecProfile,
        advancedFeatures: transcodingAdvancedFeatures,
        advancedFeatureCount: transcodingAdvancedFeatureCount,
      );
      await rtcEngine.startRtmpStreamWithTranscoding(
        url: url,
        transcoding: transcoding,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateRtmpTranscoding',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoCodecProfileType transcodingVideoCodecProfile =
          VideoCodecProfileType.videoCodecProfileBaseline;
      const VideoCodecTypeForStream transcodingVideoCodecType =
          VideoCodecTypeForStream.videoCodecH264ForStream;
      const AudioSampleRateType transcodingAudioSampleRate =
          AudioSampleRateType.audioSampleRate32000;
      const AudioCodecProfileType transcodingAudioCodecProfile =
          AudioCodecProfileType.audioCodecProfileLcAac;
      const int transcodingWidth = 10;
      const int transcodingHeight = 10;
      const int transcodingVideoBitrate = 10;
      const int transcodingVideoFramerate = 10;
      const bool transcodingLowLatency = true;
      const int transcodingVideoGop = 10;
      const int transcodingBackgroundColor = 10;
      const int transcodingUserCount = 10;
      const List<TranscodingUser> transcodingTranscodingUsers = [];
      const String transcodingTranscodingExtraInfo = "hello";
      const String transcodingMetadata = "hello";
      const List<RtcImage> transcodingWatermark = [];
      const int transcodingWatermarkCount = 10;
      const List<RtcImage> transcodingBackgroundImage = [];
      const int transcodingBackgroundImageCount = 10;
      const int transcodingAudioBitrate = 10;
      const int transcodingAudioChannels = 10;
      const List<LiveStreamAdvancedFeature> transcodingAdvancedFeatures = [];
      const int transcodingAdvancedFeatureCount = 10;
      const LiveTranscoding transcoding = LiveTranscoding(
        width: transcodingWidth,
        height: transcodingHeight,
        videoBitrate: transcodingVideoBitrate,
        videoFramerate: transcodingVideoFramerate,
        lowLatency: transcodingLowLatency,
        videoGop: transcodingVideoGop,
        videoCodecProfile: transcodingVideoCodecProfile,
        backgroundColor: transcodingBackgroundColor,
        videoCodecType: transcodingVideoCodecType,
        userCount: transcodingUserCount,
        transcodingUsers: transcodingTranscodingUsers,
        transcodingExtraInfo: transcodingTranscodingExtraInfo,
        metadata: transcodingMetadata,
        watermark: transcodingWatermark,
        watermarkCount: transcodingWatermarkCount,
        backgroundImage: transcodingBackgroundImage,
        backgroundImageCount: transcodingBackgroundImageCount,
        audioSampleRate: transcodingAudioSampleRate,
        audioBitrate: transcodingAudioBitrate,
        audioChannels: transcodingAudioChannels,
        audioCodecProfile: transcodingAudioCodecProfile,
        advancedFeatures: transcodingAdvancedFeatures,
        advancedFeatureCount: transcodingAdvancedFeatureCount,
      );
      await rtcEngine.updateRtmpTranscoding(
        transcoding,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopRtmpStream',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String url = "hello";
      await rtcEngine.stopRtmpStream(
        url,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startLocalVideoTranscoder',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoCodecType videoOutputConfigurationCodecType =
          VideoCodecType.videoCodecNone;
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions videoOutputConfigurationDimensions =
          VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const OrientationMode videoOutputConfigurationOrientationMode =
          OrientationMode.orientationModeAdaptive;
      const DegradationPreference
          videoOutputConfigurationDegradationPreference =
          DegradationPreference.maintainQuality;
      const VideoMirrorModeType videoOutputConfigurationMirrorMode =
          VideoMirrorModeType.videoMirrorModeAuto;
      const int videoOutputConfigurationFrameRate = 10;
      const int videoOutputConfigurationBitrate = 10;
      const int videoOutputConfigurationMinBitrate = 10;
      const VideoEncoderConfiguration configVideoOutputConfiguration =
          VideoEncoderConfiguration(
        codecType: videoOutputConfigurationCodecType,
        dimensions: videoOutputConfigurationDimensions,
        frameRate: videoOutputConfigurationFrameRate,
        bitrate: videoOutputConfigurationBitrate,
        minBitrate: videoOutputConfigurationMinBitrate,
        orientationMode: videoOutputConfigurationOrientationMode,
        degradationPreference: videoOutputConfigurationDegradationPreference,
        mirrorMode: videoOutputConfigurationMirrorMode,
      );
      const int configStreamCount = 10;
      const List<TranscodingVideoStream> configVideoInputStreams = [];
      const LocalTranscoderConfiguration config = LocalTranscoderConfiguration(
        streamCount: configStreamCount,
        videoInputStreams: configVideoInputStreams,
        videoOutputConfiguration: configVideoOutputConfiguration,
      );
      await rtcEngine.startLocalVideoTranscoder(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateLocalTranscoderConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoCodecType videoOutputConfigurationCodecType =
          VideoCodecType.videoCodecNone;
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions videoOutputConfigurationDimensions =
          VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const OrientationMode videoOutputConfigurationOrientationMode =
          OrientationMode.orientationModeAdaptive;
      const DegradationPreference
          videoOutputConfigurationDegradationPreference =
          DegradationPreference.maintainQuality;
      const VideoMirrorModeType videoOutputConfigurationMirrorMode =
          VideoMirrorModeType.videoMirrorModeAuto;
      const int videoOutputConfigurationFrameRate = 10;
      const int videoOutputConfigurationBitrate = 10;
      const int videoOutputConfigurationMinBitrate = 10;
      const VideoEncoderConfiguration configVideoOutputConfiguration =
          VideoEncoderConfiguration(
        codecType: videoOutputConfigurationCodecType,
        dimensions: videoOutputConfigurationDimensions,
        frameRate: videoOutputConfigurationFrameRate,
        bitrate: videoOutputConfigurationBitrate,
        minBitrate: videoOutputConfigurationMinBitrate,
        orientationMode: videoOutputConfigurationOrientationMode,
        degradationPreference: videoOutputConfigurationDegradationPreference,
        mirrorMode: videoOutputConfigurationMirrorMode,
      );
      const int configStreamCount = 10;
      const List<TranscodingVideoStream> configVideoInputStreams = [];
      const LocalTranscoderConfiguration config = LocalTranscoderConfiguration(
        streamCount: configStreamCount,
        videoInputStreams: configVideoInputStreams,
        videoOutputConfiguration: configVideoOutputConfiguration,
      );
      await rtcEngine.updateLocalTranscoderConfiguration(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopLocalVideoTranscoder',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopLocalVideoTranscoder();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startPrimaryCameraCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const CameraDirection configCameraDirection = CameraDirection.cameraRear;
      const int formatWidth = 10;
      const int formatHeight = 10;
      const int formatFps = 10;
      const VideoFormat configFormat = VideoFormat(
        width: formatWidth,
        height: formatHeight,
        fps: formatFps,
      );
      const String configDeviceId = "hello";
      const CameraCapturerConfiguration config = CameraCapturerConfiguration(
        cameraDirection: configCameraDirection,
        deviceId: configDeviceId,
        format: configFormat,
      );
      await rtcEngine.startPrimaryCameraCapture(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startSecondaryCameraCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const CameraDirection configCameraDirection = CameraDirection.cameraRear;
      const int formatWidth = 10;
      const int formatHeight = 10;
      const int formatFps = 10;
      const VideoFormat configFormat = VideoFormat(
        width: formatWidth,
        height: formatHeight,
        fps: formatFps,
      );
      const String configDeviceId = "hello";
      const CameraCapturerConfiguration config = CameraCapturerConfiguration(
        cameraDirection: configCameraDirection,
        deviceId: configDeviceId,
        format: configFormat,
      );
      await rtcEngine.startSecondaryCameraCapture(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopPrimaryCameraCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopPrimaryCameraCapture();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopSecondaryCameraCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopSecondaryCameraCapture();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCameraDeviceOrientation',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoSourceType type = VideoSourceType.videoSourceCameraPrimary;
      const VideoOrientation orientation = VideoOrientation.videoOrientation0;
      await rtcEngine.setCameraDeviceOrientation(
        type: type,
        orientation: orientation,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setScreenCaptureOrientation',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoSourceType type = VideoSourceType.videoSourceCameraPrimary;
      const VideoOrientation orientation = VideoOrientation.videoOrientation0;
      await rtcEngine.setScreenCaptureOrientation(
        type: type,
        orientation: orientation,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startPrimaryScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int screenRectX = 10;
      const int screenRectY = 10;
      const int screenRectWidth = 10;
      const int screenRectHeight = 10;
      const Rectangle configScreenRect = Rectangle(
        x: screenRectX,
        y: screenRectY,
        width: screenRectWidth,
        height: screenRectHeight,
      );
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions paramsDimensions = VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const int paramsFrameRate = 10;
      const int paramsBitrate = 10;
      const bool paramsCaptureMouseCursor = true;
      const bool paramsWindowFocus = true;
      const List<int> paramsExcludeWindowList = [];
      const int paramsExcludeWindowCount = 10;
      const ScreenCaptureParameters configParams = ScreenCaptureParameters(
        dimensions: paramsDimensions,
        frameRate: paramsFrameRate,
        bitrate: paramsBitrate,
        captureMouseCursor: paramsCaptureMouseCursor,
        windowFocus: paramsWindowFocus,
        excludeWindowList: paramsExcludeWindowList,
        excludeWindowCount: paramsExcludeWindowCount,
      );
      const int regionRectX = 10;
      const int regionRectY = 10;
      const int regionRectWidth = 10;
      const int regionRectHeight = 10;
      const Rectangle configRegionRect = Rectangle(
        x: regionRectX,
        y: regionRectY,
        width: regionRectWidth,
        height: regionRectHeight,
      );
      const bool configIsCaptureWindow = true;
      const int configDisplayId = 10;
      const int configWindowId = 10;
      const ScreenCaptureConfiguration config = ScreenCaptureConfiguration(
        isCaptureWindow: configIsCaptureWindow,
        displayId: configDisplayId,
        screenRect: configScreenRect,
        windowId: configWindowId,
        params: configParams,
        regionRect: configRegionRect,
      );
      await rtcEngine.startPrimaryScreenCapture(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startSecondaryScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int screenRectX = 10;
      const int screenRectY = 10;
      const int screenRectWidth = 10;
      const int screenRectHeight = 10;
      const Rectangle configScreenRect = Rectangle(
        x: screenRectX,
        y: screenRectY,
        width: screenRectWidth,
        height: screenRectHeight,
      );
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions paramsDimensions = VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const int paramsFrameRate = 10;
      const int paramsBitrate = 10;
      const bool paramsCaptureMouseCursor = true;
      const bool paramsWindowFocus = true;
      const List<int> paramsExcludeWindowList = [];
      const int paramsExcludeWindowCount = 10;
      const ScreenCaptureParameters configParams = ScreenCaptureParameters(
        dimensions: paramsDimensions,
        frameRate: paramsFrameRate,
        bitrate: paramsBitrate,
        captureMouseCursor: paramsCaptureMouseCursor,
        windowFocus: paramsWindowFocus,
        excludeWindowList: paramsExcludeWindowList,
        excludeWindowCount: paramsExcludeWindowCount,
      );
      const int regionRectX = 10;
      const int regionRectY = 10;
      const int regionRectWidth = 10;
      const int regionRectHeight = 10;
      const Rectangle configRegionRect = Rectangle(
        x: regionRectX,
        y: regionRectY,
        width: regionRectWidth,
        height: regionRectHeight,
      );
      const bool configIsCaptureWindow = true;
      const int configDisplayId = 10;
      const int configWindowId = 10;
      const ScreenCaptureConfiguration config = ScreenCaptureConfiguration(
        isCaptureWindow: configIsCaptureWindow,
        displayId: configDisplayId,
        screenRect: configScreenRect,
        windowId: configWindowId,
        params: configParams,
        regionRect: configRegionRect,
      );
      await rtcEngine.startSecondaryScreenCapture(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopPrimaryScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopPrimaryScreenCapture();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopSecondaryScreenCapture',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopSecondaryScreenCapture();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getConnectionState',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.getConnectionState();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRemoteUserPriority',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int uid = 10;
      const PriorityType userPriority = PriorityType.priorityHigh;
      await rtcEngine.setRemoteUserPriority(
        uid: uid,
        userPriority: userPriority,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setEncryptionMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String encryptionMode = "hello";
      await rtcEngine.setEncryptionMode(
        encryptionMode,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setEncryptionSecret',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String secret = "hello";
      await rtcEngine.setEncryptionSecret(
        secret,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableEncryption',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      const EncryptionMode configEncryptionMode = EncryptionMode.aes128Xts;
      const String configEncryptionKey = "hello";
      Uint8List configEncryptionKdfSalt = Uint8List.fromList([]);
      final EncryptionConfig config = EncryptionConfig(
        encryptionMode: configEncryptionMode,
        encryptionKey: configEncryptionKey,
        encryptionKdfSalt: configEncryptionKdfSalt,
      );
      await rtcEngine.enableEncryption(
        enabled: enabled,
        config: config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'sendStreamMessage',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int streamId = 10;
      Uint8List data = Uint8List.fromList([]);
      const int length = 10;
      await rtcEngine.sendStreamMessage(
        streamId: streamId,
        data: data,
        length: length,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'clearVideoWatermark',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.clearVideoWatermark();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'clearVideoWatermarks',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.clearVideoWatermarks();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'addInjectStreamUrl',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String url = "hello";
      const AudioSampleRateType configAudioSampleRate =
          AudioSampleRateType.audioSampleRate32000;
      const int configWidth = 10;
      const int configHeight = 10;
      const int configVideoGop = 10;
      const int configVideoFramerate = 10;
      const int configVideoBitrate = 10;
      const int configAudioBitrate = 10;
      const int configAudioChannels = 10;
      const InjectStreamConfig config = InjectStreamConfig(
        width: configWidth,
        height: configHeight,
        videoGop: configVideoGop,
        videoFramerate: configVideoFramerate,
        videoBitrate: configVideoBitrate,
        audioSampleRate: configAudioSampleRate,
        audioBitrate: configAudioBitrate,
        audioChannels: configAudioChannels,
      );
      await rtcEngine.addInjectStreamUrl(
        url: url,
        config: config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'removeInjectStreamUrl',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String url = "hello";
      await rtcEngine.removeInjectStreamUrl(
        url,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.pauseAudio();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.resumeAudio();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableWebSdkInteroperability',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      await rtcEngine.enableWebSdkInteroperability(
        enabled,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'sendCustomReportMessage',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String id = "hello";
      const String category = "hello";
      const String event = "hello";
      const String label = "hello";
      const int value = 10;
      await rtcEngine.sendCustomReportMessage(
        id: id,
        category: category,
        event: event,
        label: label,
        value: value,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startAudioFrameDump',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String channelId = "hello";
      const int userId = 10;
      const String location = "hello";
      const String uuid = "hello";
      const String passwd = "hello";
      const int durationMs = 10;
      const bool autoUpload = true;
      await rtcEngine.startAudioFrameDump(
        channelId: channelId,
        userId: userId,
        location: location,
        uuid: uuid,
        passwd: passwd,
        durationMs: durationMs,
        autoUpload: autoUpload,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopAudioFrameDump',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String channelId = "hello";
      const int userId = 10;
      const String location = "hello";
      await rtcEngine.stopAudioFrameDump(
        channelId: channelId,
        userId: userId,
        location: location,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'registerLocalUserAccount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String appId = "hello";
      const String userAccount = "hello";
      await rtcEngine.registerLocalUserAccount(
        appId: appId,
        userAccount: userAccount,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'joinChannelWithUserAccountEx',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String token = "hello";
      const String channelId = "hello";
      const String userAccount = "hello";
      const ClientRoleType optionsClientRoleType =
          ClientRoleType.clientRoleBroadcaster;
      const AudienceLatencyLevelType optionsAudienceLatencyLevel =
          AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
      const VideoStreamType optionsDefaultVideoStreamType =
          VideoStreamType.videoStreamHigh;
      const ChannelProfileType optionsChannelProfile =
          ChannelProfileType.channelProfileCommunication;
      const NlpAggressiveness
          audioOptionsExternalAecAggressivenessExternalCustom =
          NlpAggressiveness.nlpNotSpecified;
      const bool audioOptionsExternalEnableAecExternalCustom = true;
      const bool audioOptionsExternalEnableAgcExternalCustom = true;
      const bool audioOptionsExternalEnableAnsExternalCustom = true;
      const bool audioOptionsExternalEnableAecExternalLoopback = true;
      const AudioOptionsExternal optionsAudioOptionsExternal =
          AudioOptionsExternal(
        enableAecExternalCustom: audioOptionsExternalEnableAecExternalCustom,
        enableAgcExternalCustom: audioOptionsExternalEnableAgcExternalCustom,
        enableAnsExternalCustom: audioOptionsExternalEnableAnsExternalCustom,
        aecAggressivenessExternalCustom:
            audioOptionsExternalAecAggressivenessExternalCustom,
        enableAecExternalLoopback:
            audioOptionsExternalEnableAecExternalLoopback,
      );
      const bool optionsPublishCameraTrack = true;
      const bool optionsPublishSecondaryCameraTrack = true;
      const bool optionsPublishAudioTrack = true;
      const bool optionsPublishScreenTrack = true;
      const bool optionsPublishSecondaryScreenTrack = true;
      const bool optionsPublishCustomAudioTrack = true;
      const int optionsPublishCustomAudioSourceId = 10;
      const bool optionsPublishCustomAudioTrackEnableAec = true;
      const bool optionsPublishDirectCustomAudioTrack = true;
      const bool optionsPublishCustomAudioTrackAec = true;
      const bool optionsPublishCustomVideoTrack = true;
      const bool optionsPublishEncodedVideoTrack = true;
      const bool optionsPublishMediaPlayerAudioTrack = true;
      const bool optionsPublishMediaPlayerVideoTrack = true;
      const bool optionsPublishTrancodedVideoTrack = true;
      const bool optionsAutoSubscribeAudio = true;
      const bool optionsAutoSubscribeVideo = true;
      const bool optionsStartPreview = true;
      const bool optionsEnableAudioRecordingOrPlayout = true;
      const int optionsPublishMediaPlayerId = 10;
      const int optionsAudioDelayMs = 10;
      const int optionsMediaPlayerAudioDelayMs = 10;
      const String optionsToken = "hello";
      const bool optionsEnableBuiltInMediaEncryption = true;
      const bool optionsPublishRhythmPlayerTrack = true;
      const ChannelMediaOptions options = ChannelMediaOptions(
        publishCameraTrack: optionsPublishCameraTrack,
        publishSecondaryCameraTrack: optionsPublishSecondaryCameraTrack,
        publishAudioTrack: optionsPublishAudioTrack,
        publishScreenTrack: optionsPublishScreenTrack,
        publishSecondaryScreenTrack: optionsPublishSecondaryScreenTrack,
        publishCustomAudioTrack: optionsPublishCustomAudioTrack,
        publishCustomAudioSourceId: optionsPublishCustomAudioSourceId,
        publishCustomAudioTrackEnableAec:
            optionsPublishCustomAudioTrackEnableAec,
        publishDirectCustomAudioTrack: optionsPublishDirectCustomAudioTrack,
        publishCustomAudioTrackAec: optionsPublishCustomAudioTrackAec,
        publishCustomVideoTrack: optionsPublishCustomVideoTrack,
        publishEncodedVideoTrack: optionsPublishEncodedVideoTrack,
        publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
        publishMediaPlayerVideoTrack: optionsPublishMediaPlayerVideoTrack,
        publishTrancodedVideoTrack: optionsPublishTrancodedVideoTrack,
        autoSubscribeAudio: optionsAutoSubscribeAudio,
        autoSubscribeVideo: optionsAutoSubscribeVideo,
        startPreview: optionsStartPreview,
        enableAudioRecordingOrPlayout: optionsEnableAudioRecordingOrPlayout,
        publishMediaPlayerId: optionsPublishMediaPlayerId,
        clientRoleType: optionsClientRoleType,
        audienceLatencyLevel: optionsAudienceLatencyLevel,
        defaultVideoStreamType: optionsDefaultVideoStreamType,
        channelProfile: optionsChannelProfile,
        audioDelayMs: optionsAudioDelayMs,
        mediaPlayerAudioDelayMs: optionsMediaPlayerAudioDelayMs,
        token: optionsToken,
        enableBuiltInMediaEncryption: optionsEnableBuiltInMediaEncryption,
        publishRhythmPlayerTrack: optionsPublishRhythmPlayerTrack,
        audioOptionsExternal: optionsAudioOptionsExternal,
      );
      await rtcEngine.joinChannelWithUserAccountEx(
        token: token,
        channelId: channelId,
        userAccount: userAccount,
        options: options,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getUserInfoByUserAccount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String userAccount = "hello";
      await rtcEngine.getUserInfoByUserAccount(
        userAccount,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getUserInfoByUid',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int uid = 10;
      await rtcEngine.getUserInfoByUid(
        uid,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String srcInfoChannelName = "hello";
      const String srcInfoToken = "hello";
      const int srcInfoUid = 10;
      const ChannelMediaInfo configurationSrcInfo = ChannelMediaInfo(
        channelName: srcInfoChannelName,
        token: srcInfoToken,
        uid: srcInfoUid,
      );
      const List<ChannelMediaInfo> configurationDestInfos = [];
      const int configurationDestCount = 10;
      const ChannelMediaRelayConfiguration configuration =
          ChannelMediaRelayConfiguration(
        srcInfo: configurationSrcInfo,
        destInfos: configurationDestInfos,
        destCount: configurationDestCount,
      );
      await rtcEngine.startChannelMediaRelay(
        configuration,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String srcInfoChannelName = "hello";
      const String srcInfoToken = "hello";
      const int srcInfoUid = 10;
      const ChannelMediaInfo configurationSrcInfo = ChannelMediaInfo(
        channelName: srcInfoChannelName,
        token: srcInfoToken,
        uid: srcInfoUid,
      );
      const List<ChannelMediaInfo> configurationDestInfos = [];
      const int configurationDestCount = 10;
      const ChannelMediaRelayConfiguration configuration =
          ChannelMediaRelayConfiguration(
        srcInfo: configurationSrcInfo,
        destInfos: configurationDestInfos,
        destCount: configurationDestCount,
      );
      await rtcEngine.updateChannelMediaRelay(
        configuration,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopChannelMediaRelay();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pauseAllChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.pauseAllChannelMediaRelay();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resumeAllChannelMediaRelay',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.resumeAllChannelMediaRelay();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDirectCdnStreamingAudioConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const AudioProfileType profile = AudioProfileType.audioProfileDefault;
      await rtcEngine.setDirectCdnStreamingAudioConfiguration(
        profile,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setDirectCdnStreamingVideoConfiguration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoCodecType configCodecType = VideoCodecType.videoCodecNone;
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions configDimensions = VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const OrientationMode configOrientationMode =
          OrientationMode.orientationModeAdaptive;
      const DegradationPreference configDegradationPreference =
          DegradationPreference.maintainQuality;
      const VideoMirrorModeType configMirrorMode =
          VideoMirrorModeType.videoMirrorModeAuto;
      const int configFrameRate = 10;
      const int configBitrate = 10;
      const int configMinBitrate = 10;
      const VideoEncoderConfiguration config = VideoEncoderConfiguration(
        codecType: configCodecType,
        dimensions: configDimensions,
        frameRate: configFrameRate,
        bitrate: configBitrate,
        minBitrate: configMinBitrate,
        orientationMode: configOrientationMode,
        degradationPreference: configDegradationPreference,
        mirrorMode: configMirrorMode,
      );
      await rtcEngine.setDirectCdnStreamingVideoConfiguration(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startDirectCdnStreaming',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final DirectCdnStreamingEventHandler eventHandler =
          DirectCdnStreamingEventHandler(
        onDirectCdnStreamingStateChanged: (DirectCdnStreamingState state,
            DirectCdnStreamingError error, String message) {},
        onDirectCdnStreamingStats: (DirectCdnStreamingStats stats) {},
      );
      const String publishUrl = "hello";
      const bool optionsPublishCameraTrack = true;
      const bool optionsPublishMicrophoneTrack = true;
      const bool optionsPublishCustomAudioTrack = true;
      const bool optionsPublishCustomVideoTrack = true;
      const bool optionsPublishMediaPlayerAudioTrack = true;
      const int optionsPublishMediaPlayerId = 10;
      const DirectCdnStreamingMediaOptions options =
          DirectCdnStreamingMediaOptions(
        publishCameraTrack: optionsPublishCameraTrack,
        publishMicrophoneTrack: optionsPublishMicrophoneTrack,
        publishCustomAudioTrack: optionsPublishCustomAudioTrack,
        publishCustomVideoTrack: optionsPublishCustomVideoTrack,
        publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
        publishMediaPlayerId: optionsPublishMediaPlayerId,
      );
      await rtcEngine.startDirectCdnStreaming(
        eventHandler: eventHandler,
        publishUrl: publishUrl,
        options: options,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopDirectCdnStreaming',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopDirectCdnStreaming();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'updateDirectCdnStreamingMediaOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool optionsPublishCameraTrack = true;
      const bool optionsPublishMicrophoneTrack = true;
      const bool optionsPublishCustomAudioTrack = true;
      const bool optionsPublishCustomVideoTrack = true;
      const bool optionsPublishMediaPlayerAudioTrack = true;
      const int optionsPublishMediaPlayerId = 10;
      const DirectCdnStreamingMediaOptions options =
          DirectCdnStreamingMediaOptions(
        publishCameraTrack: optionsPublishCameraTrack,
        publishMicrophoneTrack: optionsPublishMicrophoneTrack,
        publishCustomAudioTrack: optionsPublishCustomAudioTrack,
        publishCustomVideoTrack: optionsPublishCustomVideoTrack,
        publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
        publishMediaPlayerId: optionsPublishMediaPlayerId,
      );
      await rtcEngine.updateDirectCdnStreamingMediaOptions(
        options,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'takeSnapshot',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String configChannel = "hello";
      const int configUid = 10;
      const String configFilePath = "hello";
      const SnapShotConfig config = SnapShotConfig(
        channel: configChannel,
        uid: configUid,
        filePath: configFilePath,
      );
      await rtcEngine.takeSnapshot(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setContentInspect',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const ContentInspectDeviceType configDeviceworkType =
          ContentInspectDeviceType.contentInspectDeviceInvalid;
      const bool configEnable = true;
      const bool configDeviceWork = true;
      const bool configCloudWork = true;
      const String configExtraInfo = "hello";
      const List<ContentInspectModule> configModules = [];
      const int configModuleCount = 10;
      const ContentInspectConfig config = ContentInspectConfig(
        enable: configEnable,
        deviceWork: configDeviceWork,
        cloudWork: configCloudWork,
        deviceworkType: configDeviceworkType,
        extraInfo: configExtraInfo,
        modules: configModules,
        moduleCount: configModuleCount,
      );
      await rtcEngine.setContentInspect(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'switchChannel',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String token = "hello";
      const String channel = "hello";
      await rtcEngine.switchChannel(
        token: token,
        channel: channel,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startRhythmPlayer',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String sound1 = "hello";
      const String sound2 = "hello";
      const int configBeatsPerMeasure = 10;
      const int configBeatsPerMinute = 10;
      const AgoraRhythmPlayerConfig config = AgoraRhythmPlayerConfig(
        beatsPerMeasure: configBeatsPerMeasure,
        beatsPerMinute: configBeatsPerMinute,
      );
      await rtcEngine.startRhythmPlayer(
        sound1: sound1,
        sound2: sound2,
        config: config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopRhythmPlayer',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.stopRhythmPlayer();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'configRhythmPlayer',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int configBeatsPerMeasure = 10;
      const int configBeatsPerMinute = 10;
      const AgoraRhythmPlayerConfig config = AgoraRhythmPlayerConfig(
        beatsPerMeasure: configBeatsPerMeasure,
        beatsPerMinute: configBeatsPerMinute,
      );
      await rtcEngine.configRhythmPlayer(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustCustomAudioPublishVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int sourceId = 10;
      const int volume = 10;
      await rtcEngine.adjustCustomAudioPublishVolume(
        sourceId: sourceId,
        volume: volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustCustomAudioPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int sourceId = 10;
      const int volume = 10;
      await rtcEngine.adjustCustomAudioPlayoutVolume(
        sourceId: sourceId,
        volume: volume,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setCloudProxy',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const CloudProxyType proxyType = CloudProxyType.noneProxy;
      await rtcEngine.setCloudProxy(
        proxyType,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalAccessPoint',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const LocalProxyMode configMode = LocalProxyMode.kConnectivityFirst;
      const List<String> configIpList = [];
      const int configIpListSize = 10;
      const List<String> configDomainList = [];
      const int configDomainListSize = 10;
      const String configVerifyDomainName = "hello";
      const LocalAccessPointConfiguration config =
          LocalAccessPointConfiguration(
        ipList: configIpList,
        ipListSize: configIpListSize,
        domainList: configDomainList,
        domainListSize: configDomainListSize,
        verifyDomainName: configVerifyDomainName,
        mode: configMode,
      );
      await rtcEngine.setLocalAccessPoint(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableFishCorrection',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      const double paramsXCenter = 10.0;
      const double paramsYCenter = 10.0;
      const double paramsScaleFactor = 10.0;
      const double paramsFocalLength = 10.0;
      const double paramsPolFocalLength = 10.0;
      const double paramsSplitHeight = 10.0;
      const List<double> paramsSs = [];
      const FishCorrectionParams params = FishCorrectionParams(
        xCenter: paramsXCenter,
        yCenter: paramsYCenter,
        scaleFactor: paramsScaleFactor,
        focalLength: paramsFocalLength,
        polFocalLength: paramsPolFocalLength,
        splitHeight: paramsSplitHeight,
        ss: paramsSs,
      );
      await rtcEngine.enableFishCorrection(
        enabled: enabled,
        params: params,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAdvancedAudioOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      await rtcEngine.setAdvancedAudioOptions();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAVSyncSource',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String channelId = "hello";
      const int uid = 10;
      await rtcEngine.setAVSyncSource(
        channelId: channelId,
        uid: uid,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'joinChannel',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String token = "hello";
      const String channelId = "hello";
      const String info = "hello";
      const int uid = 10;
      await rtcEngine.joinChannel(
        token: token,
        channelId: channelId,
        info: info,
        uid: uid,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'joinChannelWithOptions',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String token = "hello";
      const String channelId = "hello";
      const int uid = 10;
      const ClientRoleType optionsClientRoleType =
          ClientRoleType.clientRoleBroadcaster;
      const AudienceLatencyLevelType optionsAudienceLatencyLevel =
          AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
      const VideoStreamType optionsDefaultVideoStreamType =
          VideoStreamType.videoStreamHigh;
      const ChannelProfileType optionsChannelProfile =
          ChannelProfileType.channelProfileCommunication;
      const NlpAggressiveness
          audioOptionsExternalAecAggressivenessExternalCustom =
          NlpAggressiveness.nlpNotSpecified;
      const bool audioOptionsExternalEnableAecExternalCustom = true;
      const bool audioOptionsExternalEnableAgcExternalCustom = true;
      const bool audioOptionsExternalEnableAnsExternalCustom = true;
      const bool audioOptionsExternalEnableAecExternalLoopback = true;
      const AudioOptionsExternal optionsAudioOptionsExternal =
          AudioOptionsExternal(
        enableAecExternalCustom: audioOptionsExternalEnableAecExternalCustom,
        enableAgcExternalCustom: audioOptionsExternalEnableAgcExternalCustom,
        enableAnsExternalCustom: audioOptionsExternalEnableAnsExternalCustom,
        aecAggressivenessExternalCustom:
            audioOptionsExternalAecAggressivenessExternalCustom,
        enableAecExternalLoopback:
            audioOptionsExternalEnableAecExternalLoopback,
      );
      const bool optionsPublishCameraTrack = true;
      const bool optionsPublishSecondaryCameraTrack = true;
      const bool optionsPublishAudioTrack = true;
      const bool optionsPublishScreenTrack = true;
      const bool optionsPublishSecondaryScreenTrack = true;
      const bool optionsPublishCustomAudioTrack = true;
      const int optionsPublishCustomAudioSourceId = 10;
      const bool optionsPublishCustomAudioTrackEnableAec = true;
      const bool optionsPublishDirectCustomAudioTrack = true;
      const bool optionsPublishCustomAudioTrackAec = true;
      const bool optionsPublishCustomVideoTrack = true;
      const bool optionsPublishEncodedVideoTrack = true;
      const bool optionsPublishMediaPlayerAudioTrack = true;
      const bool optionsPublishMediaPlayerVideoTrack = true;
      const bool optionsPublishTrancodedVideoTrack = true;
      const bool optionsAutoSubscribeAudio = true;
      const bool optionsAutoSubscribeVideo = true;
      const bool optionsStartPreview = true;
      const bool optionsEnableAudioRecordingOrPlayout = true;
      const int optionsPublishMediaPlayerId = 10;
      const int optionsAudioDelayMs = 10;
      const int optionsMediaPlayerAudioDelayMs = 10;
      const String optionsToken = "hello";
      const bool optionsEnableBuiltInMediaEncryption = true;
      const bool optionsPublishRhythmPlayerTrack = true;
      const ChannelMediaOptions options = ChannelMediaOptions(
        publishCameraTrack: optionsPublishCameraTrack,
        publishSecondaryCameraTrack: optionsPublishSecondaryCameraTrack,
        publishAudioTrack: optionsPublishAudioTrack,
        publishScreenTrack: optionsPublishScreenTrack,
        publishSecondaryScreenTrack: optionsPublishSecondaryScreenTrack,
        publishCustomAudioTrack: optionsPublishCustomAudioTrack,
        publishCustomAudioSourceId: optionsPublishCustomAudioSourceId,
        publishCustomAudioTrackEnableAec:
            optionsPublishCustomAudioTrackEnableAec,
        publishDirectCustomAudioTrack: optionsPublishDirectCustomAudioTrack,
        publishCustomAudioTrackAec: optionsPublishCustomAudioTrackAec,
        publishCustomVideoTrack: optionsPublishCustomVideoTrack,
        publishEncodedVideoTrack: optionsPublishEncodedVideoTrack,
        publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
        publishMediaPlayerVideoTrack: optionsPublishMediaPlayerVideoTrack,
        publishTrancodedVideoTrack: optionsPublishTrancodedVideoTrack,
        autoSubscribeAudio: optionsAutoSubscribeAudio,
        autoSubscribeVideo: optionsAutoSubscribeVideo,
        startPreview: optionsStartPreview,
        enableAudioRecordingOrPlayout: optionsEnableAudioRecordingOrPlayout,
        publishMediaPlayerId: optionsPublishMediaPlayerId,
        clientRoleType: optionsClientRoleType,
        audienceLatencyLevel: optionsAudienceLatencyLevel,
        defaultVideoStreamType: optionsDefaultVideoStreamType,
        channelProfile: optionsChannelProfile,
        audioDelayMs: optionsAudioDelayMs,
        mediaPlayerAudioDelayMs: optionsMediaPlayerAudioDelayMs,
        token: optionsToken,
        enableBuiltInMediaEncryption: optionsEnableBuiltInMediaEncryption,
        publishRhythmPlayerTrack: optionsPublishRhythmPlayerTrack,
        audioOptionsExternal: optionsAudioOptionsExternal,
      );
      await rtcEngine.joinChannelWithOptions(
        token: token,
        channelId: channelId,
        uid: uid,
        options: options,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'leaveChannel',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool optionsStopAudioMixing = true;
      const bool optionsStopAllEffect = true;
      const bool optionsStopMicrophoneRecording = true;
      const LeaveChannelOptions options = LeaveChannelOptions(
        stopAudioMixing: optionsStopAudioMixing,
        stopAllEffect: optionsStopAllEffect,
        stopMicrophoneRecording: optionsStopMicrophoneRecording,
      );
      await rtcEngine.leaveChannel(
        options: options,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setClientRole',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const ClientRoleType role = ClientRoleType.clientRoleBroadcaster;
      const AudienceLatencyLevelType optionsAudienceLatencyLevel =
          AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
      const ClientRoleOptions options = ClientRoleOptions(
        audienceLatencyLevel: optionsAudienceLatencyLevel,
      );
      await rtcEngine.setClientRole(
        role: role,
        options: options,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startEchoTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int intervalInSeconds = 10;
      await rtcEngine.startEchoTest(
        intervalInSeconds: intervalInSeconds,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startPreview',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoSourceType sourceType =
          VideoSourceType.videoSourceCameraPrimary;
      await rtcEngine.startPreview(
        sourceType: sourceType,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopPreview',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const VideoSourceType sourceType =
          VideoSourceType.videoSourceCameraPrimary;
      await rtcEngine.stopPreview(
        sourceType: sourceType,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioProfile',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const AudioProfileType profile = AudioProfileType.audioProfileDefault;
      const AudioScenarioType scenario = AudioScenarioType.audioScenarioDefault;
      await rtcEngine.setAudioProfile(
        profile: profile,
        scenario: scenario,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startAudioRecording',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const AudioFileRecordingType configFileRecordingType =
          AudioFileRecordingType.audioFileRecordingMic;
      const AudioRecordingQualityType configQuality =
          AudioRecordingQualityType.audioRecordingQualityLow;
      const String configFilePath = "hello";
      const bool configEncode = true;
      const int configSampleRate = 10;
      const AudioRecordingConfiguration config = AudioRecordingConfiguration(
        filePath: configFilePath,
        encode: configEncode,
        sampleRate: configSampleRate,
        fileRecordingType: configFileRecordingType,
        quality: configQuality,
      );
      await rtcEngine.startAudioRecording(
        config,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startAudioMixing',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String filePath = "hello";
      const bool loopback = true;
      const bool replace = true;
      const int cycle = 10;
      const int startPos = 10;
      await rtcEngine.startAudioMixing(
        filePath: filePath,
        loopback: loopback,
        replace: replace,
        cycle: cycle,
        startPos: startPos,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLocalRenderMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const RenderModeType renderMode = RenderModeType.renderModeHidden;
      const VideoMirrorModeType mirrorMode =
          VideoMirrorModeType.videoMirrorModeAuto;
      await rtcEngine.setLocalRenderMode(
        renderMode: renderMode,
        mirrorMode: mirrorMode,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableDualStreamMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const bool enabled = true;
      const VideoSourceType sourceType =
          VideoSourceType.videoSourceCameraPrimary;
      const int dimensionsWidth = 10;
      const int dimensionsHeight = 10;
      const VideoDimensions streamConfigDimensions = VideoDimensions(
        width: dimensionsWidth,
        height: dimensionsHeight,
      );
      const int streamConfigBitrate = 10;
      const int streamConfigFramerate = 10;
      const SimulcastStreamConfig streamConfig = SimulcastStreamConfig(
        dimensions: streamConfigDimensions,
        bitrate: streamConfigBitrate,
        framerate: streamConfigFramerate,
      );
      await rtcEngine.enableDualStreamMode(
        enabled: enabled,
        sourceType: sourceType,
        streamConfig: streamConfig,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'addVideoWatermark',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String watermarkUrl = "hello";
      const int positionInLandscapeModeX = 10;
      const int positionInLandscapeModeY = 10;
      const int positionInLandscapeModeWidth = 10;
      const int positionInLandscapeModeHeight = 10;
      const Rectangle optionsPositionInLandscapeMode = Rectangle(
        x: positionInLandscapeModeX,
        y: positionInLandscapeModeY,
        width: positionInLandscapeModeWidth,
        height: positionInLandscapeModeHeight,
      );
      const int positionInPortraitModeX = 10;
      const int positionInPortraitModeY = 10;
      const int positionInPortraitModeWidth = 10;
      const int positionInPortraitModeHeight = 10;
      const Rectangle optionsPositionInPortraitMode = Rectangle(
        x: positionInPortraitModeX,
        y: positionInPortraitModeY,
        width: positionInPortraitModeWidth,
        height: positionInPortraitModeHeight,
      );
      const double watermarkRatioXRatio = 10.0;
      const double watermarkRatioYRatio = 10.0;
      const double watermarkRatioWidthRatio = 10.0;
      const WatermarkRatio optionsWatermarkRatio = WatermarkRatio(
        xRatio: watermarkRatioXRatio,
        yRatio: watermarkRatioYRatio,
        widthRatio: watermarkRatioWidthRatio,
      );
      const WatermarkFitMode optionsMode =
          WatermarkFitMode.fitModeCoverPosition;
      const bool optionsVisibleInPreview = true;
      const WatermarkOptions options = WatermarkOptions(
        visibleInPreview: optionsVisibleInPreview,
        positionInLandscapeMode: optionsPositionInLandscapeMode,
        positionInPortraitMode: optionsPositionInPortraitMode,
        watermarkRatio: optionsWatermarkRatio,
        mode: optionsMode,
      );
      await rtcEngine.addVideoWatermark(
        watermarkUrl: watermarkUrl,
        options: options,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'joinChannelWithUserAccount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const String token = "hello";
      const String channelId = "hello";
      const String userAccount = "hello";
      const ClientRoleType optionsClientRoleType =
          ClientRoleType.clientRoleBroadcaster;
      const AudienceLatencyLevelType optionsAudienceLatencyLevel =
          AudienceLatencyLevelType.audienceLatencyLevelLowLatency;
      const VideoStreamType optionsDefaultVideoStreamType =
          VideoStreamType.videoStreamHigh;
      const ChannelProfileType optionsChannelProfile =
          ChannelProfileType.channelProfileCommunication;
      const NlpAggressiveness
          audioOptionsExternalAecAggressivenessExternalCustom =
          NlpAggressiveness.nlpNotSpecified;
      const bool audioOptionsExternalEnableAecExternalCustom = true;
      const bool audioOptionsExternalEnableAgcExternalCustom = true;
      const bool audioOptionsExternalEnableAnsExternalCustom = true;
      const bool audioOptionsExternalEnableAecExternalLoopback = true;
      const AudioOptionsExternal optionsAudioOptionsExternal =
          AudioOptionsExternal(
        enableAecExternalCustom: audioOptionsExternalEnableAecExternalCustom,
        enableAgcExternalCustom: audioOptionsExternalEnableAgcExternalCustom,
        enableAnsExternalCustom: audioOptionsExternalEnableAnsExternalCustom,
        aecAggressivenessExternalCustom:
            audioOptionsExternalAecAggressivenessExternalCustom,
        enableAecExternalLoopback:
            audioOptionsExternalEnableAecExternalLoopback,
      );
      const bool optionsPublishCameraTrack = true;
      const bool optionsPublishSecondaryCameraTrack = true;
      const bool optionsPublishAudioTrack = true;
      const bool optionsPublishScreenTrack = true;
      const bool optionsPublishSecondaryScreenTrack = true;
      const bool optionsPublishCustomAudioTrack = true;
      const int optionsPublishCustomAudioSourceId = 10;
      const bool optionsPublishCustomAudioTrackEnableAec = true;
      const bool optionsPublishDirectCustomAudioTrack = true;
      const bool optionsPublishCustomAudioTrackAec = true;
      const bool optionsPublishCustomVideoTrack = true;
      const bool optionsPublishEncodedVideoTrack = true;
      const bool optionsPublishMediaPlayerAudioTrack = true;
      const bool optionsPublishMediaPlayerVideoTrack = true;
      const bool optionsPublishTrancodedVideoTrack = true;
      const bool optionsAutoSubscribeAudio = true;
      const bool optionsAutoSubscribeVideo = true;
      const bool optionsStartPreview = true;
      const bool optionsEnableAudioRecordingOrPlayout = true;
      const int optionsPublishMediaPlayerId = 10;
      const int optionsAudioDelayMs = 10;
      const int optionsMediaPlayerAudioDelayMs = 10;
      const String optionsToken = "hello";
      const bool optionsEnableBuiltInMediaEncryption = true;
      const bool optionsPublishRhythmPlayerTrack = true;
      const ChannelMediaOptions options = ChannelMediaOptions(
        publishCameraTrack: optionsPublishCameraTrack,
        publishSecondaryCameraTrack: optionsPublishSecondaryCameraTrack,
        publishAudioTrack: optionsPublishAudioTrack,
        publishScreenTrack: optionsPublishScreenTrack,
        publishSecondaryScreenTrack: optionsPublishSecondaryScreenTrack,
        publishCustomAudioTrack: optionsPublishCustomAudioTrack,
        publishCustomAudioSourceId: optionsPublishCustomAudioSourceId,
        publishCustomAudioTrackEnableAec:
            optionsPublishCustomAudioTrackEnableAec,
        publishDirectCustomAudioTrack: optionsPublishDirectCustomAudioTrack,
        publishCustomAudioTrackAec: optionsPublishCustomAudioTrackAec,
        publishCustomVideoTrack: optionsPublishCustomVideoTrack,
        publishEncodedVideoTrack: optionsPublishEncodedVideoTrack,
        publishMediaPlayerAudioTrack: optionsPublishMediaPlayerAudioTrack,
        publishMediaPlayerVideoTrack: optionsPublishMediaPlayerVideoTrack,
        publishTrancodedVideoTrack: optionsPublishTrancodedVideoTrack,
        autoSubscribeAudio: optionsAutoSubscribeAudio,
        autoSubscribeVideo: optionsAutoSubscribeVideo,
        startPreview: optionsStartPreview,
        enableAudioRecordingOrPlayout: optionsEnableAudioRecordingOrPlayout,
        publishMediaPlayerId: optionsPublishMediaPlayerId,
        clientRoleType: optionsClientRoleType,
        audienceLatencyLevel: optionsAudienceLatencyLevel,
        defaultVideoStreamType: optionsDefaultVideoStreamType,
        channelProfile: optionsChannelProfile,
        audioDelayMs: optionsAudioDelayMs,
        mediaPlayerAudioDelayMs: optionsMediaPlayerAudioDelayMs,
        token: optionsToken,
        enableBuiltInMediaEncryption: optionsEnableBuiltInMediaEncryption,
        publishRhythmPlayerTrack: optionsPublishRhythmPlayerTrack,
        audioOptionsExternal: optionsAudioOptionsExternal,
      );
      await rtcEngine.joinChannelWithUserAccount(
        token: token,
        channelId: channelId,
        userAccount: userAccount,
        options: options,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAudioDeviceManager',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      rtcEngine.getAudioDeviceManager();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getVideoDeviceManager',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      rtcEngine.getVideoDeviceManager();

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'sendMetaData',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int metadataUid = 10;
      const int metadataSize = 10;
      Uint8List metadataBuffer = Uint8List.fromList([]);
      const int metadataTimeStampMs = 10;
      final Metadata metadata = Metadata(
        uid: metadataUid,
        size: metadataSize,
        buffer: metadataBuffer,
        timeStampMs: metadataTimeStampMs,
      );
      const VideoSourceType sourceType =
          VideoSourceType.videoSourceCameraPrimary;
      await rtcEngine.sendMetaData(
        metadata: metadata,
        sourceType: sourceType,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setMaxMetadataSize',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      const int size = 10;
      await rtcEngine.setMaxMetadataSize(
        size,
      );

      await rtcEngine.release();
    },
//  skip: !(),
  );
}

