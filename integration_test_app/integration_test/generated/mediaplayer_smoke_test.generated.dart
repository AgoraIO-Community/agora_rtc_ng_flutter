/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names

import 'dart:io';

import 'package:agora_rtc_ng/agora_rtc_ng.dart';
import 'package:flutter_test/flutter_test.dart';
import 'dart:typed_data';
import 'package:integration_test_app/main.dart' as app;

void mediaPlayerControllerSmokeTestCases() {
  testWidgets(
    'getMediaPlayerId',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      mediaPlayerController.getMediaPlayerId();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'open',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String url = "hello";
      const int startPos = 10;
      await mediaPlayerController.open(
        url: url,
        startPos: startPos,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'play',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.play();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'pause',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.pause();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stop',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.stop();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'resume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.resume();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'seek',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int newPos = 10;
      await mediaPlayerController.seek(
        newPos,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioPitch',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int pitch = 10;
      await mediaPlayerController.setAudioPitch(
        pitch,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getDuration',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getDuration();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlayPosition',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getPlayPosition();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getStreamCount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getStreamCount();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getStreamInfo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int index = 10;
      await mediaPlayerController.getStreamInfo(
        index,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setLoopCount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int loopCount = 10;
      await mediaPlayerController.setLoopCount(
        loopCount,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteAudio',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const bool audioMute = true;
      await mediaPlayerController.muteAudio(
        audioMute,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isAudioMuted',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.isAudioMuted();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'muteVideo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const bool videoMute = true;
      await mediaPlayerController.muteVideo(
        videoMute,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'isVideoMuted',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.isVideoMuted();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlaybackSpeed',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int speed = 10;
      await mediaPlayerController.setPlaybackSpeed(
        speed,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'selectAudioTrack',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int index = 10;
      await mediaPlayerController.selectAudioTrack(
        index,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'takeScreenshot',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String filename = "hello";
      await mediaPlayerController.takeScreenshot(
        filename,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'selectInternalSubtitle',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int index = 10;
      await mediaPlayerController.selectInternalSubtitle(
        index,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setExternalSubtitle',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String url = "hello";
      await mediaPlayerController.setExternalSubtitle(
        url,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getState',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getState();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'mute',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const bool mute = true;
      await mediaPlayerController.mute(
        mute,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getMute',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getMute();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int volume = 10;
      await mediaPlayerController.adjustPlayoutVolume(
        volume,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlayoutVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getPlayoutVolume();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'adjustPublishSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int volume = 10;
      await mediaPlayerController.adjustPublishSignalVolume(
        volume,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPublishSignalVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getPublishSignalVolume();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRenderMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const RenderModeType renderMode = RenderModeType.renderModeHidden;
      await mediaPlayerController.setRenderMode(
        renderMode,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'registerPlayerSourceObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      final MediaPlayerSourceObserver observer = MediaPlayerSourceObserver(
        onPlayerSourceStateChanged:
            (MediaPlayerState state, MediaPlayerError ec) {},
        onPositionChanged: (int position) {},
        onPlayerEvent:
            (MediaPlayerEvent eventCode, int elapsedTime, String message) {},
        onMetaData: (Uint8List data, int length) {},
        onPlayBufferUpdated: (int playCachedBuffer) {},
        onPreloadEvent: (String src, PlayerPreloadEvent event) {},
        onCompleted: () {},
        onAgoraCDNTokenWillExpire: () {},
        onPlayerSrcInfoChanged: (SrcInfo from, SrcInfo to) {},
        onPlayerInfoUpdated: (PlayerUpdatedInfo info) {},
        onAudioVolumeIndication: (int volume) {},
      );
      mediaPlayerController.registerPlayerSourceObserver(
        observer,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unregisterPlayerSourceObserver',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      final MediaPlayerSourceObserver observer = MediaPlayerSourceObserver(
        onPlayerSourceStateChanged:
            (MediaPlayerState state, MediaPlayerError ec) {},
        onPositionChanged: (int position) {},
        onPlayerEvent:
            (MediaPlayerEvent eventCode, int elapsedTime, String message) {},
        onMetaData: (Uint8List data, int length) {},
        onPlayBufferUpdated: (int playCachedBuffer) {},
        onPreloadEvent: (String src, PlayerPreloadEvent event) {},
        onCompleted: () {},
        onAgoraCDNTokenWillExpire: () {},
        onPlayerSrcInfoChanged: (SrcInfo from, SrcInfo to) {},
        onPlayerInfoUpdated: (PlayerUpdatedInfo info) {},
        onAudioVolumeIndication: (int volume) {},
      );
      mediaPlayerController.unregisterPlayerSourceObserver(
        observer,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setAudioDualMonoMode',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const AudioDualMonoMode mode = AudioDualMonoMode.audioDualMonoStereo;
      await mediaPlayerController.setAudioDualMonoMode(
        mode,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlayerSdkVersion',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getPlayerSdkVersion();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlaySrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getPlaySrc();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'openWithAgoraCDNSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String src = "hello";
      const int startPos = 10;
      await mediaPlayerController.openWithAgoraCDNSrc(
        src: src,
        startPos: startPos,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getAgoraCDNLineCount',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getAgoraCDNLineCount();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'switchAgoraCDNLineByIndex',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const int index = 10;
      await mediaPlayerController.switchAgoraCDNLineByIndex(
        index,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getCurrentAgoraCDNIndex',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      await mediaPlayerController.getCurrentAgoraCDNIndex();

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enableAutoSwitchAgoraCDN',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const bool enable = true;
      await mediaPlayerController.enableAutoSwitchAgoraCDN(
        enable,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'renewAgoraCDNSrcToken',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String token = "hello";
      const int ts = 10;
      await mediaPlayerController.renewAgoraCDNSrcToken(
        token: token,
        ts: ts,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'switchAgoraCDNSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String src = "hello";
      const bool syncPts = true;
      await mediaPlayerController.switchAgoraCDNSrc(
        src: src,
        syncPts: syncPts,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'switchSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String src = "hello";
      const bool syncPts = true;
      await mediaPlayerController.switchSrc(
        src: src,
        syncPts: syncPts,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'preloadSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String src = "hello";
      const int startPos = 10;
      await mediaPlayerController.preloadSrc(
        src: src,
        startPos: startPos,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'playPreloadedSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String src = "hello";
      await mediaPlayerController.playPreloadedSrc(
        src,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'unloadSrc',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String src = "hello";
      await mediaPlayerController.unloadSrc(
        src,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setSpatialAudioParams',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const double paramsSpeakerAzimuth = 10.0;
      const double paramsSpeakerElevation = 10.0;
      const double paramsSpeakerDistance = 10.0;
      const int paramsSpeakerOrientation = 10;
      const bool paramsEnableBlur = true;
      const bool paramsEnableAirAbsorb = true;
      const SpatialAudioParams params = SpatialAudioParams(
        speakerAzimuth: paramsSpeakerAzimuth,
        speakerElevation: paramsSpeakerElevation,
        speakerDistance: paramsSpeakerDistance,
        speakerOrientation: paramsSpeakerOrientation,
        enableBlur: paramsEnableBlur,
        enableAirAbsorb: paramsEnableAirAbsorb,
      );
      await mediaPlayerController.setSpatialAudioParams(
        params,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlayerOptionInInt',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String key = "hello";
      const int value = 10;
      await mediaPlayerController.setPlayerOptionInInt(
        key: key,
        value: value,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlayerOptionInString',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final mediaPlayerController = await MediaPlayerController.create(
          rtcEngine: rtcEngine, canvas: const VideoCanvas(uid: 0));

      const String key = "hello";
      const String value = "hello";
      await mediaPlayerController.setPlayerOptionInString(
        key: key,
        value: value,
      );

      await mediaPlayerController.dispose();
      await rtcEngine.release();
    },
//  skip: !(),
  );
}

