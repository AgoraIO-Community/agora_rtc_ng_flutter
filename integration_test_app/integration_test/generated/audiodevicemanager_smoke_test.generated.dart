/// GENERATED BY testcase_gen. DO NOT MODIFY BY HAND.

// ignore_for_file: deprecated_member_use,constant_identifier_names

import 'dart:io';

import 'package:agora_rtc_ng/agora_rtc_ng.dart';
import 'package:flutter_test/flutter_test.dart';
import 'dart:typed_data';
import 'package:integration_test_app/main.dart' as app;

void audioDeviceManagerSmokeTestCases() {
  testWidgets(
    'enumeratePlaybackDevices',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.enumeratePlaybackDevices();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'enumerateRecordingDevices',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.enumerateRecordingDevices();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlaybackDevice',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      const String deviceId = "hello";
      await audioDeviceManager.setPlaybackDevice(
        deviceId,
      );

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlaybackDevice',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.getPlaybackDevice();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlaybackDeviceInfo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.getPlaybackDeviceInfo();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlaybackDeviceVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      const int volume = 10;
      await audioDeviceManager.setPlaybackDeviceVolume(
        volume,
      );

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlaybackDeviceVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.getPlaybackDeviceVolume();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRecordingDevice',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      const String deviceId = "hello";
      await audioDeviceManager.setRecordingDevice(
        deviceId,
      );

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getRecordingDevice',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.getRecordingDevice();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getRecordingDeviceInfo',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.getRecordingDeviceInfo();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRecordingDeviceVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      const int volume = 10;
      await audioDeviceManager.setRecordingDeviceVolume(
        volume,
      );

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getRecordingDeviceVolume',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.getRecordingDeviceVolume();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setPlaybackDeviceMute',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      const bool mute = true;
      await audioDeviceManager.setPlaybackDeviceMute(
        mute,
      );

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getPlaybackDeviceMute',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.getPlaybackDeviceMute();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'setRecordingDeviceMute',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      const bool mute = true;
      await audioDeviceManager.setRecordingDeviceMute(
        mute,
      );

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'getRecordingDeviceMute',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.getRecordingDeviceMute();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startPlaybackDeviceTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      const String testAudioFilePath = "hello";
      await audioDeviceManager.startPlaybackDeviceTest(
        testAudioFilePath,
      );

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopPlaybackDeviceTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.stopPlaybackDeviceTest();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startRecordingDeviceTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      const int indicationInterval = 10;
      await audioDeviceManager.startRecordingDeviceTest(
        indicationInterval,
      );

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopRecordingDeviceTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.stopRecordingDeviceTest();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'startAudioDeviceLoopbackTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      const int indicationInterval = 10;
      await audioDeviceManager.startAudioDeviceLoopbackTest(
        indicationInterval,
      );

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );

  testWidgets(
    'stopAudioDeviceLoopbackTest',
    (WidgetTester tester) async {
      app.main();
      await tester.pumpAndSettle();

      String engineAppId = const String.fromEnvironment('TEST_APP_ID',
          defaultValue: '<YOUR_APP_ID>');

      RtcEngine rtcEngine = createAgoraRtcEngine();
      await rtcEngine.initialize(RtcEngineContext(
        appId: engineAppId,
        areaCode: AreaCode.areaCodeGlob.value(),
      ));

      final audioDeviceManager = rtcEngine.getAudioDeviceManager();

      await audioDeviceManager.stopAudioDeviceLoopbackTest();

      audioDeviceManager.release();
      await rtcEngine.release();
    },
//  skip: !(),
  );
}

